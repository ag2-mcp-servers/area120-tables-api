# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:56:16+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class BatchDeleteRowsRequest(BaseModel):
    names: Optional[List[str]] = Field(
        None,
        description='Required. The names of the rows to delete. All rows must belong to the parent table or else the entire batch will fail. A maximum of 500 rows can be deleted in a batch. Format: tables/{table}/rows/{row}',
    )


class View(Enum):
    VIEW_UNSPECIFIED = 'VIEW_UNSPECIFIED'
    COLUMN_ID_VIEW = 'COLUMN_ID_VIEW'


class DateDetails(BaseModel):
    hasTime: Optional[bool] = Field(
        None, description='Whether the date column includes time.'
    )


class Empty(BaseModel):
    pass


class LabeledItem(BaseModel):
    id: Optional[str] = Field(None, description='Internal id associated with the item.')
    name: Optional[str] = Field(None, description='Display string as entered by user.')


class LookupDetails(BaseModel):
    relationshipColumn: Optional[str] = Field(
        None,
        description='The name of the relationship column associated with the lookup.',
    )
    relationshipColumnId: Optional[str] = Field(
        None, description='The id of the relationship column.'
    )


class RelationshipDetails(BaseModel):
    linkedTable: Optional[str] = Field(
        None, description='The name of the table this relationship is linked to.'
    )


class Row(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Time when the row was created.'
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the row. Row names have the form `tables/{table}/rows/{row}`. The name is ignored when creating a row.',
    )
    updateTime: Optional[str] = Field(
        None, description='Time when the row was last updated.'
    )
    values: Optional[Dict[str, Any]] = Field(
        None,
        description='The values of the row. This is a map of column key to value. Key is user entered name(default) or the internal column id based on the view in the request.',
    )


class SavedView(BaseModel):
    id: Optional[str] = Field(
        None, description='Internal id associated with the saved view.'
    )
    name: Optional[str] = Field(None, description='Display name of the saved view.')


class UpdateRowRequest(BaseModel):
    row: Optional[Row] = Field(None, description='Required. The row to update.')
    updateMask: Optional[str] = Field(None, description='The list of fields to update.')
    view: Optional[View] = Field(
        None,
        description='Optional. Column key to use for values in the row. Defaults to user entered name.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class BatchCreateRowsResponse(BaseModel):
    rows: Optional[List[Row]] = Field(None, description='The created rows.')


class BatchUpdateRowsRequest(BaseModel):
    requests: Optional[List[UpdateRowRequest]] = Field(
        None,
        description='Required. The request messages specifying the rows to update. A maximum of 500 rows can be modified in a single batch.',
    )


class BatchUpdateRowsResponse(BaseModel):
    rows: Optional[List[Row]] = Field(None, description='The updated rows.')


class ColumnDescription(BaseModel):
    dataType: Optional[str] = Field(
        None,
        description='Data type of the column Supported types are auto_id, boolean, boolean_list, creator, create_timestamp, date, dropdown, location, integer, integer_list, number, number_list, person, person_list, tags, check_list, text, text_list, update_timestamp, updater, relationship, file_attachment_list. These types directly map to the column types supported on Tables website.',
    )
    dateDetails: Optional[DateDetails] = Field(
        None, description='Optional. Additional details about a date column.'
    )
    id: Optional[str] = Field(None, description='Internal id for a column.')
    labels: Optional[List[LabeledItem]] = Field(
        None,
        description='Optional. Range of labeled values for the column. Some columns like tags and drop-downs limit the values to a set of possible values. We return the range of values in such cases to help clients implement better user data validation.',
    )
    lookupDetails: Optional[LookupDetails] = Field(
        None,
        description='Optional. Indicates that this is a lookup column whose value is derived from the relationship column specified in the details. Lookup columns can not be updated directly. To change the value you must update the associated relationship column.',
    )
    multipleValuesDisallowed: Optional[bool] = Field(
        None,
        description='Optional. Indicates whether or not multiple values are allowed for array types where such a restriction is possible.',
    )
    name: Optional[str] = Field(None, description='column name')
    readonly: Optional[bool] = Field(
        None,
        description='Optional. Indicates that values for the column cannot be set by the user.',
    )
    relationshipDetails: Optional[RelationshipDetails] = Field(
        None,
        description='Optional. Additional details about a relationship column. Specified when data_type is relationship.',
    )


class CreateRowRequest(BaseModel):
    parent: Optional[str] = Field(
        None,
        description='Required. The parent table where this row will be created. Format: tables/{table}',
    )
    row: Optional[Row] = Field(None, description='Required. The row to create.')
    view: Optional[View] = Field(
        None,
        description='Optional. Column key to use for values in the row. Defaults to user entered name.',
    )


class ListRowsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is empty, there are no subsequent pages.',
    )
    rows: Optional[List[Row]] = Field(
        None, description='The rows from the specified table.'
    )


class Table(BaseModel):
    columns: Optional[List[ColumnDescription]] = Field(
        None,
        description='List of columns in this table. Order of columns matches the display order.',
    )
    createTime: Optional[str] = Field(
        None, description='Time when the table was created.'
    )
    displayName: Optional[str] = Field(
        None, description='The human readable title of the table.'
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the table. Table names have the form `tables/{table}`.',
    )
    savedViews: Optional[List[SavedView]] = Field(
        None, description='Saved views for this table.'
    )
    timeZone: Optional[str] = Field(
        None,
        description='The time zone of the table. IANA Time Zone Database time zone, e.g. "America/New_York".',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Time when the table was last updated excluding updates to individual rows',
    )


class Workspace(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Time when the workspace was created.'
    )
    displayName: Optional[str] = Field(
        None, description='The human readable title of the workspace.'
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the workspace. Workspace names have the form `workspaces/{workspace}`.',
    )
    tables: Optional[List[Table]] = Field(
        None, description='The list of tables in the workspace.'
    )
    updateTime: Optional[str] = Field(
        None, description='Time when the workspace was last updated.'
    )


class BatchCreateRowsRequest(BaseModel):
    requests: Optional[List[CreateRowRequest]] = Field(
        None,
        description='Required. The request message specifying the rows to create. A maximum of 500 rows can be created in a single batch.',
    )


class ListTablesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is empty, there are no subsequent pages.',
    )
    tables: Optional[List[Table]] = Field(None, description='The list of tables.')


class ListWorkspacesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is empty, there are no subsequent pages.',
    )
    workspaces: Optional[List[Workspace]] = Field(
        None, description='The list of workspaces.'
    )
